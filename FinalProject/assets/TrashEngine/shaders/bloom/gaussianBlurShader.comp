#version 450

// whether it is a vertical pass
uniform uint u_vertical;

layout (location = 0) uniform sampler2D u_inputImage;

uniform ivec2 u_outputSize;
layout (location = 1, rgba32f) uniform image2D u_outputImage;

const float kernelValue[] = { 0.0093, 0.028002, 0.065984, 0.121703, 0.175713, 0.198596, 0.175713, 0.121703, 0.065984, 0.028002, 0.0093};

// dispatch(downScaleLOD.width / 32, downScaleLOD.height / 32, 1)
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
void main() {

	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	vec2 texelSize = 1.0 / vec2(u_outputSize);
	vec2 texCoord = vec2(pixel_coords) * texelSize;
	
	
	vec4 storeColor = vec4(0.0);
	// 試試看
	if (u_vertical > 0) {
		vec2 offset = vec2(0, -5 * texelSize.y);
		for(int i = 0; i < 11; i++) {
			vec2 inputCoord = texCoord + offset;
			storeColor += texture(u_inputImage, inputCoord) * kernelValue[i];
			offset.y += texelSize.y;
		}
	} else {
		vec2 offset = vec2(-5 * texelSize.x, 0);
		for(int i = 0; i < 11; i++) {
			vec2 inputCoord = texCoord + offset;
			storeColor += texture(u_inputImage, inputCoord) * kernelValue[i];
			offset.x += texelSize.x;
		}
	}
	
	imageStore(u_outputImage, pixel_coords, storeColor);

}
