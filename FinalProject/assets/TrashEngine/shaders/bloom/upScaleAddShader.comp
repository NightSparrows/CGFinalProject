#version 450

// the output lod -1 image
layout (location = 0) uniform sampler2D u_inputUpscaleImage;
// the blur texture same as output image
layout (location = 1) uniform sampler2D u_inputImage;
// the output image
uniform ivec2 u_outputSize;
layout (location = 2) uniform writeonly image2D u_outputImage;

vec4 tentFilter(sampler2D textureSampler, vec2 texCoord, vec2 texelSize);

// dispatch(outputImage.width / 32, outputImage.height / 32, 1)
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
void main() {

	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	vec2 texelSize = 1.0 / vec2(u_outputSize);
	vec2 texCoord = vec2(pixel_coords) * texelSize;

	// impl tent filter
	vec4 storeColor = tentFilter(u_inputImage, texCoord, texelSize);

	storeColor += tentFilter(u_inputUpscaleImage, texCoord, texelSize);

	imageStore(u_outputImage, pixel_coords, storeColor);
}

vec4 tentFilter(sampler2D textureSampler, vec2 texCoord, vec2 texelSize) {

	vec4 s = vec4(0.0);
	s += texture(textureSampler, texCoord + texelSize * vec2(-1, -1));
	s += texture(textureSampler, texCoord + texelSize * vec2( 0, -1)) * 2.0;
	s += texture(textureSampler, texCoord + texelSize * vec2( 1, -1));
	
	s += texture(textureSampler, texCoord + texelSize * vec2(-1,  0)) * 2.0;
	s += texture(textureSampler, texCoord + texelSize * vec2( 0,  0)) * 4.0;
	s += texture(textureSampler, texCoord + texelSize * vec2( 1,  0)) * 2.0;
	
	s += texture(textureSampler, texCoord + texelSize * vec2(-1,  1));
	s += texture(textureSampler, texCoord + texelSize * vec2( 0,  1)) * 2.0;
	s += texture(textureSampler, texCoord + texelSize * vec2( 1,  1));

	s /= 16.0;

	return s;
}